#include <iostream>
#include "seblas/tensor/Tensor.cuh"
#include "seblas/operations/cuGEMM.cuh"
#include "seblas/operations/cuConv.cuh"
#include "seblas/assist/Inspection.cuh"

using namespace seblas;

int main() {
    float filterSrc[] = {0.292537, -0.341470, -0.906449,
                         -0.807691, 0.665113, 1.586169,
                         -1.319829, -1.315827, 0.830978,
/*
                         -1.467973, -0.009459, -0.439360,
                         0.821991, 0.166916, 0.476371,
                         -1.485519, -0.397557, -0.233498,

                         0.334616, 0.012668, -0.059497,
                         -0.251207, -0.099488, 0.658490,
                         -0.024151, 0.181664, -0.733029,


                         2.129015, -0.284884, 1.045876,
                         0.429302, -1.347742, 0.303384,
                         0.695684, 1.768979, 1.823771,

                         0.705561, -0.745142, -0.410031,
                         -1.411808, 0.285695, -1.096854,
                         0.435225, -0.261367, 0.846464,

                         -0.420890, 0.812517, 1.106060,
                         0.296889, -1.575974, -0.737070,
                         0.473411, 1.015767, 1.587861,


                         -0.387953, 0.318806, -0.215202,
                         -0.348202, -0.468112, 0.165930,
                         0.904593, 0.540665, -0.725413,

                         0.041312, 0.467378, 0.299193,
                         -0.336908, 1.046657, -1.305684,
                         1.335161, 1.015637, 1.945626,

                         -0.209496, -0.369743, -0.714924,
                         -0.237067, -1.990948, 1.525293,
                         0.496195, 0.475850, -1.263674
                         */
    };

    float featureOutSrc[] = {
            0.292537, 1.477946, -1.022649, 0.663664, -0.667150,
            0.388433, 0.175175, -0.906796, 0.613012, 1.043798,
            1.032304, 0.542372, -0.060134, -0.290955, 0.899823,
            -0.808977, 0.770424, 0.882615, -2.369544, -0.659137,
            -0.296557, 0.648746, 0.426925, 1.300024, 1.234151,
            /*
            -0.663155, -0.076854, 0.418117, 1.143491, -1.421067,
            0.430837, 0.177340, -0.328225, 0.925212, 0.674107,
            0.536833, 0.525361, -0.285148, -0.771062, -0.062401,
            0.279607, 0.480591, 1.316907, 0.398117, -0.753627,
            0.863051, -0.964343, -0.746281, -0.375241, -0.793480,

            0.627705, -0.646794, -0.411658, -1.198477, 0.479998,
            1.535889, 0.066616, 0.960561, 1.931847, 0.563863,
            0.696728, -0.958611, 0.185200, 0.077910, -0.070188,
            -0.911144, 0.986333, -0.887646, -1.030644, 1.268516,
            -0.523600, -0.654803, 0.618246, -0.638727, -1.049074
            */
    };

    auto* A = Tensor::declare(1,1,3,3)->attach(filterSrc,-1)->ripOffHost();
    auto* B = Tensor::declare(1,1,5,5)->attach(featureOutSrc,-1)->ripOffHost();
    auto* C = Tensor::declare(1,1,5,5)->create();

    convDerive(A,B,C, 1,1,1,1);
    inspect(C);
}